% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/join_count.R
\name{join_count}
\alias{join_count}
\title{Test for Spatial Join Count Statistics}
\usage{
join_count(matrix_data)
}
\arguments{
\item{matrix_data}{A binary matrix (with elements 0 and 1) representing the
spatial distribution of two types of points. Rows and columns of the matrix
indicate coordinates while the 0s and 1s represent different categories of
observations.}
}
\value{
A list containing several statistical measures:
\itemize{
\item Observed_01_10: The number of observed 01 or 10 sequences.
\item Observed_11: The number of observed 11 sequences.
\item Expected_ER_01: The expected number of 01 or 10 sequences under
random distribution.
\item Expected_ER_11: The expected number of 11 sequences under random
distribution.
\item sR_01: Standard deviation for 01 or 10 sequences.
\item sR_11: Standard deviation for 11 sequences.
\item ZHD: The Z-score for 01 or 10 sequences.
\item ZDD: The Z-score for 11 sequences.
\item PatternHD: Descriptive result for 01 or 10 sequences - "Aggregated"
or "Not Aggregated".
\item PatternDD: Descriptive result for 11 sequences - "Aggregated" or
"Not Aggregated".
}
}
\description{
The function \code{join_count} calculates spatial statistics for a matrix.
It identifies patterns of aggregation for values in a binary matrix based on
join count statistics. The results determine whether the observed spatial
arrangement is aggregated, random, or uniform regarding the presence of 1s
("D") and 0s ("H").
}
\details{
The function first calculates the count of specific binary sequences in the
matrix both horizontally and vertically. It then computes expected values
and standard deviations based on the spatial arrangement dimensions and uses
these for Z-score calculations to identify the pattern of the matrix.
}
\examples{
matrix_data <- matrix(c(1,1,1,0,0,
                        1,1,1,0,0,
                        1,1,1,0,0,
                        1,1,1,0,0,
                        0,0,0,0,0), ncol = 5, byrow = TRUE)
join_count(matrix_data)

}
